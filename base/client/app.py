from flask import Flask, redirect, request, render_template, session
from tinydb import TinyDB, Query
from tinydb.table import Document
import os
import random
import string
import urllib.parse
import requests
import base64
import json

app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY')

db = TinyDB('../db.json')

state: str = None
access_token: str = None

users = [
    {
        'name': 'bob',
        'password': 'hoge'
    },
    {
        'name': 'tom',
        'password': 'huga'
    }
]
client = {
    'client_id': 'oauth-client-1',
    'client_secret': 'oauth-client-secret-1',
    'redirect_uris': ['http://localhost:10000/callback'],
    'scope': 'hoge huga'
}
auth_server = {
    'authorization_endpoint': 'http://localhost:10001/authorize',
    'token_endpoint': 'http://auth_server:10001/token'
}
protected_resource: str = 'http://protected_resource:10002/resource'

def generate_randomstring(size: int) -> str:
    return ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(size))

def build_url(base: str, options: dict) -> str:
    pr = urllib.parse.urlparse(base)
    return str(urllib.parse.urlunparse(pr._replace(query=urllib.parse.urlencode(options, doseq=True))))

def encode_client_credentials(client_id: str, client_secret: str) -> str:
    return base64.b64encode(bytes(urllib.parse.quote(client_id)+':'+urllib.parse.quote(client_secret), 'utf-8')).decode('utf-8')

@app.route("/", methods=["GET"])
def index():
    if not session.get('name'):
        return redirect('/login')
    return render_template('index.html', access_token=access_token, name=session.get('name'))
    
@app.route("/login", methods=["GET", "POST"])
def login():
    if request.method == 'POST':
        for user in users:
            if user['name'] == request.form.get('name'):
                if user['password'] == request.form.get('password'):
                    session['name'] = request.form.get('name')
                    return redirect('/')
        return render_template('error.html', error='invalid username or password')        
    return render_template('login.html')

@app.route("/logout", methods=["POST"])
def logout():
    session["name"] = None
    return redirect("/")

@app.route("/authorize", methods=["GET"])
def authorize():
    if not session.get('name'):
        return redirect('/login')
    
    state = generate_randomstring(32)
    if len(db.all()) == 0:
        db.insert({'state': state, 'user': session.get('name')})
    else:
        db.insert(Document({'state': state, 'user': session.get('name')}, doc_id=db.all()[-1].doc_id+1))
    authorize_url: str = build_url(auth_server['authorization_endpoint'], {
        'response_type': 'code',
        'client_id': client['client_id'],
        'redirect_uri': client['redirect_uris'][0],
        'state': state,
        'scope': client['scope']
    })
    print('redirect to:', authorize_url)
    return redirect(authorize_url)

@app.route("/callback", methods=["GET"])
def callback():
    if not session.get('name'):
        return redirect('/login')
    
    if request.args.get('error') != None:
        return render_template('error.html', error=request.args.get('error'))
    
    # check state and session
    State = Query()
    res = db.search(State.state == request.args.get('state'))
    if len(res) == 0:
        return render_template('error.html', error='State value did not match')
    if res[0]['user'] != session.get('name'):
        return render_template('error.html', error='State value did not match')
    
    code: str = request.args.get('code', '')
    
    payload = {
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': client['redirect_uris'][0]
    }
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': 'Basic ' + encode_client_credentials(client['client_id'], client['client_secret'])
    }
    res = requests.post(auth_server['token_endpoint'], data=payload, headers=headers)
    print('Requesting access token for code %s' % (code))
    
    if res.status_code >= 200 and res.status_code < 300:
        access_token: str = res.json()['access_token']
        return render_template('index.html', access_token=access_token)
    else:   
        return render_template('error.html', error='Unable to fetch access token, server response: ' + str(res.status_code))

@app.route("/fetch_resource", methods=["GET"])
def fetch_resource():
    if not session.get('name'):
        return redirect('/login')
    
    access_token = request.args.get('access_token')
    if access_token == None:
        return render_template('error.html', error='Missing Access Token')

    print('Making request with access token %s' % (access_token))
    headers = {
        'Authorization': 'Bearer ' + access_token
    }
    res = requests.post(protected_resource, headers=headers)
    
    if res.status_code >= 200 and res.status_code < 300:
        return render_template('data.html', resource=json.dumps(res.json()))
    else:   
        return render_template('error.html', error=res.status_code)

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=10000)