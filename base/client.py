from distutils.command.build import build
from flask import Flask, g, redirect, request, Response
import random
import string
import urllib.parse
import requests
import base64
import json

app = Flask(__name__)
state: str = None
access_token: str = None
scope: str = None

client = {
    'client_id': 'oauth-client-1',
    'client_secret': 'oauth-client-secret-1',
    'redirect_uris': ['http://localhost:10000/callback'],
    'scope': 'hoge huga'
}
auth_server = {
    'authorization_endpoint': 'http://localhost:10001/authorize',
    'token_endpoint': 'http://localhost:10001/token'
}

def generate_randomstring(size: int) -> str:
    return ''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(size))

def build_url(base: str, options: dict) -> str:
    pr = urllib.parse.urlparse(base)
    return str(urllib.parse.urlunparse(pr._replace(query=urllib.parse.urlencode(options, doseq=True))))

def encode_client_credentials(client_id: str, client_secret: str) -> str:
    print(urllib.parse.quote(client_id)+':'+urllib.parse.quote(client_secret))
    return base64.b64encode(bytes(urllib.parse.quote(client_id)+':'+urllib.parse.quote(client_secret), 'utf-8')).decode('utf-8')

@app.route("/", methods=["GET"])
def index():
    return "ok"

@app.route("/authorize", methods=["GET"])
def authorize():
    access_token = None
    state = generate_randomstring(32)
    authorize_url: str = build_url(auth_server['authorization_endpoint'], {
        'response_type': 'code',
        'client_id': client['client_id'],
        'redirect_uri': client['redirect_uris'][0],
        'state': state,
        'scope': client['scope']
    })
    print('redirect to:', authorize_url)
    return redirect(authorize_url)

@app.route("/callback", methods=["GET"])
def callback():
    if request.args.get('error', '') != '':
        return 'Error: ' + request.args.get('error', '')
    
    if request.args.get('state', '') != state:
        print('State does not match: expected %s got %s' % (state, request.args.get('state', '')))
        
    code: str = request.args.get('code', '')
    
    payload = {
        'grant_type': 'authorization_code',
        'code': code,
        'redirect_uri': client['redirect_uris'][0]
    }
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': 'Basic ' + encode_client_credentials(client['client_id'], client['client_secret'])
    }
    print(encode_client_credentials(client['client_id'], client['client_secret']))
    res = requests.post(auth_server['token_endpoint'], data=payload, headers=headers)
    print('Requesting access token for code %s' % (code))
    
    if res.status_code >= 200 and res.status_code < 300:
        access_token: str = res.json()['access_token']
        return Response(response=json.dumps({'access_token': access_token, 'scope': scope}), status=200)
    else:   
        return 'Error: ' + 'Unable to fetch access token, server response: ' + str(res.status_code)

@app.route("/fetch_resource", methods=["GET"])
def fetch_resource():
    return "ok"

if __name__ == '__main__':
    app.run(host="0.0.0.0", port=10000)